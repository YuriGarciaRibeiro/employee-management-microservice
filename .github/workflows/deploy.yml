name: Build, Test, Analyze and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test-analyze:
    name: Build, Test and Code Analysis
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # NecessÃ¡rio para SonarQube

    # 2. Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 3. Setup Java (para SonarScanner)
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # 4. Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # 5. Install SonarScanner
    - name: Install SonarScanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    # 6. Begin SonarQube analysis
    - name: Begin SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      run: |
        dotnet sonarscanner begin \
          /k:"${SONAR_PROJECT_KEY}" \
          /o:"${SONAR_ORGANIZATION}" \
          /d:sonar.host.url="${SONAR_HOST_URL:-http://localhost:9000}" \
          /d:sonar.login="${SONAR_TOKEN}" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.coverage.exclusions="**Tests.cs,**Tests/**,**/Migrations/**" \
          /d:sonar.verbose=true

    # 7. Build solution
    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    # 8. Run tests with coverage
    - name: Run tests with coverage
      run: |
        dotnet test --configuration Release --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    # 9. End SonarQube analysis
    - name: End SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

    # 9.5 Ensure Sonar report-task.txt is available for Quality Gate action
    - name: Locate and copy Sonar report-task.txt
      run: |
        echo "Searching for report-task.txt files..."
        set -e
        # show potential locations for debugging
        find . -type f -name 'report-task.txt' -print || true
        REPORT=$(find . -type f -name 'report-task.txt' | head -n1 || true)
        if [ -z "$REPORT" ]; then
          echo "No report-task.txt found. Listing repository for debug:"
          ls -la
          echo "Full tree:" && find . -maxdepth 3 -type d -print
          exit 0
        fi
        echo "Found report: $REPORT"
        mkdir -p .scannerwork
        cp "$REPORT" .scannerwork/report-task.txt
        echo "Copied $REPORT -> .scannerwork/report-task.txt"
      shell: bash

    # 10. Wait for Quality Gate result
    - name: Wait for Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-test-analyze
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        service:
          - name: cadastro-api
            dockerfile: src/Services/Cadastro/EmployeeManagement.Cadastro.API/Dockerfile
            context: .
          - name: ativacao-worker
            dockerfile: src/Services/Ativacao/EmployeeManagement.Ativacao.Worker/Dockerfile
            context: .
          - name: notificacoes-api
            dockerfile: src/Services/Notificacoes/EmployeeManagement.Notificacoes.API/Dockerfile
            context: .

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image - ${{ matrix.service.name }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-test-analyze

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
