version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: employee-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - employee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: employee-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - employee-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: employee-pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - employee-network
    depends_on:
      - postgres

  # Microservices
  cadastro-api:
    build:
      context: .
      dockerfile: src/Services/Cadastro/EmployeeManagement.Cadastro.API/Dockerfile
    container_name: employee-cadastro-api
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=employeedb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - JwtSettings__Secret=${JWT_SECRET}
      - EmailSettings__SmtpUser=${SMTP_USER}
      - EmailSettings__SmtpPassword=${SMTP_PASSWORD}
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - employee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  ativacao-worker:
    build:
      context: .
      dockerfile: src/Services/Ativacao/EmployeeManagement.Ativacao.Worker/Dockerfile
    container_name: employee-ativacao-worker
    env_file:
      - .env
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=employeedb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Search Path=ativacao
      - ConnectionStrings__HangfireConnection=Host=postgres;Port=5432;Database=employeedb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__CadastroConnection=Host=postgres;Port=5432;Database=employeedb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Search Path=cadastro
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - employee-network
    restart: unless-stopped

  notificacoes-api:
    build:
      context: .
      dockerfile: src/Services/Notificacoes/EmployeeManagement.Notificacoes.API/Dockerfile
    container_name: employee-notificacoes-api
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    ports:
      - "5002:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - employee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres-data:
  rabbitmq-data:
  pgadmin-data:

networks:
  employee-network:
    driver: bridge
